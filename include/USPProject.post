#
# "THE BEER-WARE LICENSE" (Revision CS-42):
#
# This file was written by the CodeShop developers.  As long as you
# retain this notice you can do whatever you want with it.
# If we meet some day, and you think this file is worth it, you can
# buy us a beer in return.  Even if you do that, this file still
# comes WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#

#
# $(call check-prereqs,<project>,<depending project*>)
#
check-prereqs = $(strip \
  $(foreach pre,$($1.prereqs), \
    $(if $(filter-out $(all-projects),$(pre)), \
      $(error prerequisite project '$(pre)' in project '$1' not found) \
    ) \
    $(if $(filter $1 $2,$(pre)), \
      $(error $(strip \
        project cycle in project prereq chain \
        $(foreach proj,$(call reverse,$1 $2), \
          '$(proj)' -> \
        ) \
        '$(pre)' \
      )) \
    ) \
    $(call check-prereqs,$(pre),$(strip $1 $2)) \
  ) \
)
      
#
# $(call proj-with-pkg,<project>)
#
proj-with-pkg = $(strip \
  '$1' \
  $(if $($1.package), \
    $(open-paren)package: '$($1.package)'$(close-paren) \
  ) \
)

#
# $(call is-prereq,<project>,<of project>*)
#
is-prereq = $(strip \
  $(if $(firstword $2), \
    $(if $(filter $(foreach of,$2,$($(of).prereqs)),$1), \
      yes \
    , \
      $(call is-prereq,$1,$(foreach of,$2,$($(of).prereqs))) \
    ) \
  ) \
)
    
#
# $(call contains-prereq,<project *>,<of project>)
#
contains-prereq = $(strip \
  $(if $(firstword $1), \
    $(if $(call is-prereq,$(firstword $1),$2), \
      yes \
    , \
      $(call contains-prereq,$(wordlist 2,$(words $1),$1),$2) \
    ) \
  ) \
)

#
# $(call remove-depending,<project *>,<on project>)
#
remove-depending = $(strip \
  $(foreach proj,$1, \
    $(if $(call is-prereq,$2,$(proj)), \
      \
    , \
      $(proj) \
    ) \
  ) \
)

#
# $(call add-packager,<packager *>,<new packager>)
#
add-packager = $(strip \
  $(if $(filter $1,$2), \
    $1 \
  , \
    $(if $(call contains-prereq,$1,$2), \
      $1 \
    , \
      $2 $(call remove-depending,$1,$2) \
    ) \
  ) \
)
      
#
# $(call add-packagers,<project>,<depending project>*,<packager>?)
#
add-packagers = $(strip \
  $(if $($1.distributable), \
    $(if $($1.package), \
      $(if $(filter-out $($3.package),$($1.package)), \
        $(if $(filter $(foreach dep,$2,$($(dep).package)),$($1.package)), \
          $(error $(strip \
            package cycle in project prereq chain \
            $(foreach proj,$(call reverse,$2), \
              $(call proj-with-pkg,$(proj)) -> \
            ) \
            $(call proj-with-pkg,$1) \
          )) \
        ) \
      ) \
      $(eval $1.packagers := $1) \
    , \
      $(if $(strip $3), \
        $(eval $1.packagers := $(call add-packager,$($1.packagers),$3)) \
      ) \
    ) \
  , \
    $(if $($1.package), \
      $(error $(strip \
        project '$1' cannot have a package because it is not distributable \
      )) \
    ) \
    $(eval $1.packagers :=) \
  ) \
  \
  $(foreach pre,$($1.prereqs), \
    $(call add-packagers,$(pre),$(strip $1 $2),$(if $($1.package),$1,$3)) \
  ) \
)

#
# $(call potential-packages,<project>)
#
potential-packages = $(strip \
  $(sort \
    $(foreach pkgr,$($1.packagers),$($(pkgr).package)) \
  ) \
)

#
# $(call set-package-impl,<project>,<potential package*>)
#
set-package-impl = $(strip \
  $(if $(filter 0,$(words $2)), \
    $(eval $1.package :=) \
  , \
    $(if $(filter 1,$(words $2)), \
      $(eval $1.package := $(firstword $2)) \
      $(if $(filter-out $(all-packages),$(firstword $2)), \
        $(eval all-packages += $(firstword $2)) \
      ) \
    , \
      $(error $(strip \
        cannot implicitly determine package for project '$1' because \
        not all packaged projects depending on this project \
        [$(foreach pkgr,$($1.packagers),$(call proj-with-pkg,$(pkgr)))] \
        are in the same package \
      )) \
    ) \
  ) \
)

#
# $(call set-package,<project>)
#
set-package = $(call set-package-impl,$1,$(call potential-packages,$1))

#
# $(call projects-for-package,<package>)
#
projects-for-package = $(strip \
  $(foreach proj,$(all-projects), \
    $(if $(filter $1,$($(proj).package)), \
      $(proj) \
    ) \
  ) \
)

#
# $(call package-target,<package>)
#
define package-target =
.PHONY: package.$1
package.$1: $(foreach proj,$(call projects-for-package,$1),$(proj).package-project)

endef

#
# Check the prerequisites for all projects, so we know they form
# a proper dependency DAG without dangling project references.
#
$(foreach proj,$(all-projects),$(call check-prereqs,$(proj)))

#
# For each project, determine the list of (zero or more) packagers.
# A packager is a project with an explicit package attribute.
#
$(foreach proj,$(all-projects),$(eval $(proj).packagers :=))
$(foreach proj,$(all-projects),$(call add-packagers,$(proj)))

#
# For each project, determine the package (if any) by examining its
# list of packagers.
#
all-packages :=
$(foreach proj,$(all-projects),$(call set-package,$(proj)))

#
# For each package, define a 'package.<package>' target
#
$(strip \
  $(foreach pkg,$(all-packages), \
    $(call expand,$(call package-target,$(pkg))) \
  ) \
)

.PHONY: package.all
package.all: $(foreach pkg,$(all-packages),package.$(pkg)) 

PHONY: clean
clean:
	$(usp-rm-rf) "$(call to-shell,$(build-dir))"

