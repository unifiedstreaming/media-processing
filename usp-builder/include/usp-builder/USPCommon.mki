#
# Copyright (C) 2022-2024 CodeShop B.V.
#
# This file is part of the usp-builder project.
#
# The usp-builder project is free software: you can redistribute it
# and/or modify it under the terms of version 2 of the GNU General
# Public License as published by the Free Software Foundation.
#
# The usp-builder project is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See version
# 2 of the GNU General Public License for more details.
#
# You should have received a copy of version 2 of the GNU General
# Public License along with the usp-builder project.  If not, see
# <http://www.gnu.org/licenses/>.
#

#
# Determine usp-builder's lib and include dirs
#
override usp-builder-include-dir := $(abspath $(dir $(lastword $(MAKEFILE_LIST)))/..)
override usp-builder-lib-dir := $(abspath $(usp-builder-include-dir)/../lib)

#
# Check for GNU make
#
$(strip \
  $(if $(filter GNU,$(word 1,$(shell $(MAKE) -v))), \
  , \
    $(error this file requires GNU make) \
  ) \
)

#
# $(call check-make-version,<minimum>)
# (Inspired by John Graham-Cumming)
#
check-make-version = $(strip \
  $(if $(filter $1,$(word 1,$(sort $1 $(MAKE_VERSION)))), \
    \
  , \
    $(error this file requires $(MAKE) version $1 or higher) \
  ) \
)

$(call check-make-version,4.1) 
    
#
# Some common settings and utilities
#

.DEFAULT_GOAL := all

.DELETE_ON_ERROR:
.SECONDEXPANSION:

#
# $(call REM,<word>*)
#
# Insert random comments in function bodies.  Beware of dollars and
# parentheses.
#
REM =

#
# A well-known hack for embedding characters that are skipped otherwise
#
empty :=

#
# Use $(space) for embedding a space in a list of (space-separated) tokens
#
space := $(empty) $(empty)

#
# Use $(tab) for embedding a tab in a list of (space-separated) tokens
#
tab := $(empty)	$(empty)

#
# Use $(newline) for embedding a newline in text
#
define newline :=


endef

#
# Use $(comma) to denote a literal comma in function arguments
#
comma := ,

#
# Use $(open-paren) and $(close-paren) for parentheses
#
open-paren := (
close-paren := )

#
# $(windows) is non-empty when on Windows
#
windows := $(if $(findstring Windows,$(OS)),yes,)

#
# $(cygwin) is non-empty when under Cygwin.  We assume this is true
# when running cygwin make.
#
cygwin := $(if $(windows),$(if $(findstring cygwin,$(shell $(MAKE) --version)),yes))

#
# $(unix-like) is non-empty under vanilla Unix or Cygwin
#
unix-like := $(if $(windows),$(cygwin),yes)

#
# $(darwin) and $(freebsd) are non-empty when detected
#
uname-s := $(if $(unix-like),$(shell uname -s))
darwin := $(if $(filter darwin% Darwin%,$(uname-s)),yes)
freebsd := $(if $(filter freeBSD% FreeBSD%,$(uname-s)),yes)

#
# $(dev-null) is the name of the system bitbucket
#
dev-null := $(if $(unix-like),/dev/null,NUL)

#
# $(call get-command,<usp variable name>,<unix default>,<windows default>)
#
get-command = $(strip \
  $(if $(strip $($1)), \
    $($1) \
  , \
    $(if $(unix-like), \
      $2 \
    , \
      $3 \
    ) \
  ) \
)

#
# determine the default system python interpreter
#
default-usp-system-python := $(strip \
  $(if $(strip $(shell python3 --version 2>$(dev-null))), \
    python3 \
  , \
    python \
  ) \
)

#
# determine the default sed (it must support GNU sed regexp syntax)
#
default-usp-sed := $(strip \
  $(if $(strip $(shell gsed --version 2>$(dev-null))), \
    gsed \
  , \
    sed \
  ) \
)

#
# pick up system commands for the shell
#
usp-cp := $(call get-command,usp-cp,cp,copy /Y)
usp-ln-sf := $(call get-command,usp-ln-sf,ln -sf,symlinks-not-supported)
usp-mkdir-p := $(call get-command,usp-mkdir-p,mkdir -p,-mkdir)
usp-mv-f := $(call get-command,usp-mv-f,mv -f,move)
usp-rm-dir := $(call get-command,usp-rm-dir,rm -rf,-rmdir /S /Q)
usp-rm-file := $(call get-command,usp-rm-file,rm -f,-del /Q)
usp-sed := $(call get-command,usp-sed,$(default-usp-sed),$(default-usp-sed))
usp-system-python := $(call get-command,usp-system-python,$(default-usp-system-python),$(default-usp-system-python))
usp-zip := $(call get-command,usp-zip,zip,zip)

#
# force PYTHONIOENCODING to UTF-8
#
PYTHONIOENCODING=utf-8:surrogateescape
export PYTHONIOENCODING

#
# $(call unset,<environment variable>)
#
unset = $(if $(unix-like),unset $1,set $1=)

#
# $(call escape,<path>)
#
# Converts each <space> in path to <backslash><space>
#
escape = $(subst $(space),\$(space),$1)

#
# $(call unescape,<path>)
#
# Converts each <backslash><space> in path to <space>
#
unescape = $(subst \$(space),$(space),$1)

#
# $(call to-make,<path>)
#
# Converts a path passed on the command line to one understood by make
# (backslashes mapped to slashes, spaces escaped by backslashes)
#
to-make = $(call escape,$(subst \,/,$1))

#
# $(call to-shell,<path>)
#
# Converts a make-style <path> to a path for the shell.
#
to-shell = $(if $(unix-like),$(call unescape,$1),$(subst /,\,$(call unescape,$1)))

#
# $(call to-native,<path>)
#
# Converts a make-style path to a path for a native executable.
#
to-native = $(if $(cygwin),$(shell cygpath --windows "$(call to-shell,$1)"),$(call to-shell,$1))

#
# $(call non-relative-path,<path>)
#
# Converts <path> to a path insensitive to changing the current
# directory, preserving (single) spaces.  Please note that the
# path is not normalized.
#
reject-drive-relative = $(if $(findstring :./,$1),$(error drive-relative paths not supported),$1)

non-relative-path = $(strip \
  $(call reject-drive-relative,$(abspath $(word 1,$1))) \
  $(wordlist 2,$(words $1),$1) \
)

#
# $(call is-dir,<path>)
#
is-dir = $(strip \
  $(if $(wildcard $(patsubst %/,%,$1)/.), \
    yes \
  ) \
)

#
# $(call find-files,<pattern>*,<root>*)
#
# Recursively lists all non-directories matching any <pattern>,
# starting from the <root> wildcards.  Spaces in directory or file
# names mess things up.
#
find-files = $(strip \
  $(foreach name,$(wildcard $2), \
    $(if $(call is-dir,$(name)), \
      $(call find-files,$1,$(patsubst %/,%,$(name))/*) \
    , \
      $(filter $1,$(patsubst ./%,%,$(name))) \
    ) \
  ) \
)

#
# $(call find-dirs,<pattern>*,<root>*)
#
# Recursively lists all directories matching any <pattern>, starting
# from the <root> wildcards.  Spaces in directory or file names mess
# things up.
#
find-dirs = $(strip \
  $(foreach name,$(wildcard $2), \
    $(if $(call is-dir,$(name)), \
      $(filter $1,$(patsubst ./%,%,$(name))) \
      $(call find-dirs,$1,$(patsubst %/,%,$(name))/*) \
    ) \
  ) \
)

#
# $(call dependency-listing,<target> ...,<prerequisite file> ...)
#
# Returns the text for a dependency makefile, where each <target>
# depends on each <prerequisite file>.  A missing prerequisite file
# (without a recipe) causes make to think each <target> is out of
# date.
#
define dependency-listing =
$1: $2

$(subst $(space),,$(addsuffix :$(newline),$2))
endef

#
# $(call is-in-tree,<path>,<root>)
#
# Returns non-empty if <path> is in the tree starting at <root>
#
is-in-tree = $(if $(filter $(patsubst %/,%,$(abspath $2))/%,$(patsubst %/,%,$(abspath $1))/),yes)

#
# $(call check-out-of-tree,<path>,<root>)
#
check-out-of-tree = $(if $(call is-in-tree,$1,$2),$(error '$1' is in tree '$2'))

#
# $(call validate-build-setting,<name>,<allowed value>...,<default>)
# Returns a validated build settting
#
validate-build-setting = $(strip \
  $(if $($1), \
    $(if $(or $(word 2,$($1)),$(filter-out $2,$($1))), \
      $(error bad value '$($1)' for $1) \
    , \
      $($1) \
    ) \
  , \
    $3 \
  ) \
)
    
#
# $(call checked-major-gcc-version,<version>)
#
checked-major-gcc-version = $(strip \
  $(if $(strip $1), \
    $1 \
  , \
    $(error could not determine major gcc version) \
  ) \
)

#
# $(call major-gcc-version)
#
major-gcc-version = $(call checked-major-gcc-version,$(shell gcc -v 2>&1 \
  | $(usp-sed) -n 's/^gcc version[[:space:]]\+\([[:digit:]]\+\).*/\1/p'))

#
# Determine bjam-like build settings
#
override default-address-model := $(strip \
  $(if $(filter 32,$(shell getconf LONG_BIT 2>$(dev-null))), \
    32 \
  , \
    64 \
  ) \
)
override default-toolset := $(strip \
  $(if $(windows), \
    msvc \
  , \
    $(if $(or $(darwin),$(freebsd)), \
      clang \
    , \
      $(if $(filter 0 1 2 3 4 5 6 7,$(call major-gcc-version)), \
        $(call REM,default to gcc-8 for proper C++17 support) \
        gcc-8 \
      , \
        gcc \
      ) \
    ) \
  ) \
)
override default-variant := debug

override address-model :=\
  $(call validate-build-setting,address-model,32 64,$(default-address-model))
override address-sanitizer :=\
  $(call validate-build-setting,address-sanitizer,on norecover,)
override thread-sanitizer :=\
  $(call validate-build-setting,thread-sanitizer,on norecover,)
override toolset :=\
  $(call validate-build-setting,toolset,%,$(default-toolset))
override undefined-sanitizer :=\
  $(call validate-build-setting,undefined-sanitizer,on norecover,)
override variant :=\
  $(call validate-build-setting,variant,debug release,$(default-variant))
override stdlib :=\
  $(call validate-build-setting,stdlib,libc++,)

override build-settings := $(strip \
  address-model=$(address-model) \
  $(addprefix address-sanitizer=,$(address-sanitizer)) \
  $(addprefix thread-sanitizer=,$(thread-sanitizer)) \
  toolset=$(toolset) \
  $(addprefix undefined-sanitizer=,$(undefined-sanitizer)) \
  variant=$(variant) \
  $(addprefix stdlib=,$(stdlib)) \
)

#
# Determine C and C++ compiler names based on toolset
#
toolset-compilers := $(strip \
  $(if $(filter msvc msvc-%,$(toolset)), \
    cl.exe cl.exe \
  , \
    $(if $(filter clang,$(toolset)), \
      clang clang++ \
    , \
      $(if $(filter clang-%,$(toolset)), \
        $(toolset) $(patsubst clang-%,clang++-%,$(toolset)) \
      , \
        $(if $(filter gcc,$(toolset)), \
          gcc g++ \
        , \
          $(if $(filter gcc-%,$(toolset)), \
            $(toolset) $(patsubst gcc-%,g++-%,$(toolset)) \
          , \
            $(error unknown toolset '$(toolset)') \
          ) \
        ) \
      ) \
    ) \
  ) \
)

toolset-c-compiler := $(word 1,$(toolset-compilers))
toolset-cpp-compiler := $(word 2,$(toolset-compilers))

#
# Determine sanitizer flags for compiler command lines
#
sanitizer-keys := address thread undefined
sanitizer-flags := $(strip \
  $(foreach key,$(sanitizer-keys), \
    $(if $(filter on norecover,$($(key)-sanitizer)),-fsanitize=$(key)) \
  ) \
  $(addprefix -fno-sanitize-recover=, \
    $(subst $(space),$(comma),$(strip \
      $(foreach key,$(sanitizer-keys), \
        $(if $(filter norecover,$($(key)-sanitizer)),$(key)) \
      ) \
    )) \
  ) \
)

#
# Determine stdlib flags for compiler command lines
#
stdlib-flags := $(if $(filter libc++,$(stdlib)),-stdlib=libc++)

#
# Determine the name of the bjam executable, preferring 'b2' over 'bjam'
#
default-bjam := $(if $(shell b2 --version 2>$(dev-null)),b2,bjam)
usp-bjam := $(call get-command,usp-bjam,$(default-bjam),$(default-bjam))

#
# $(call staged-jamfile-content,<library name>,<library file>?,<include directory>,<prereq library>...,<linker-found library name>?,<linkmode>?)
#
# Generates the content of a jamfile for consuming a library.
# Please note that we use the 'alias' rule (instead of the 'lib' rule)
# for the header-only case.  This avoids any default library search
# algorithm based on the library's name.
#
define staged-jamfile-content =
$(if $(strip $2$5),lib,alias) $1
: 
:$(if $(strip $2),$(newline)  <file>"$(subst \,/,$(call to-native,$2))",$(if $(strip $5),$(newline)  <name>$5))$(if $(strip $6),$(newline)  <link>$(strip $6))
:
:
  <include>"$(subst \,/,$(call to-native,$3))"$(foreach prereq,$4,$(newline)  <library>../$(prereq)//$(prereq))
;

endef

#
# $(call version-suffix,<version>?)
#
version-suffix = $(if $(strip $1),_$(subst .,_,$(strip $1)))

#
# $(call bjam-target,<source directory>,<subtarget>?)
#
bjam-target = $(if $(cygwin),$(shell cygpath --mixed "$(call to-shell,$1)"),$(call to-shell,$1))$(if $2,//$2)

#
# $(call bjam-dll-filename,<library name>,<version>?)
#
bjam-dll-filename = $(if $(windows),,lib)$1$(call version-suffix,$2)$(if $(windows),.dll,$(if $(darwin),.dylib,.so))

#
# $(call bjam-implib-filename,<library name>)
#
bjam-implib-filename = $(if $(windows),,lib)$1$(if $(windows),.lib,$(if $(darwin),.dylib,.so))

#
# $(call bjam-statlib-filename,<library name>)
#
bjam-statlib-filename = lib$1$(if $(windows),.lib,.a)

#
# establish dest-dir
#
override dest-dir := $(call to-make,$(call non-relative-path,$(dest-dir)))

#
# $(call required-value,<name>)
#
required-value = $(strip \
  $(if $(strip $($1)), \
    $($1) \
  , \
    $(error '$1' must be be set) \
  ) \
)

#
# $(call keep-last-instance,<word>*)
#
keep-last-instance-impl = $(if $(firstword $1), \
  $(if $(filter $(firstword $1),$(wordlist 2,$(words $1),$1)), \
    , \
    $(firstword $1) \
  ) \
  $(call keep-last-instance-impl,$(wordlist 2,$(words $1),$1)) \
)

keep-last-instance = $(strip $(call keep-last-instance-impl,$1))

#
# $(call call-stripped,<function>[,<arg1>[,<arg2>,[<arg3>[,<arg4>[,<arg5>[,<arg6>[,<arg7>[,<arg8>[,<arg9>[,<arg10>][,<arg11>][,<arg12>][,<arg13>][,<arg14>][,<arg15>][,<arg16>][,<arg17>][,<arg18>][,<arg19>][,<arg20>]]]]]]]]]]]]]]]]]]]])
#
call-stripped = $(call $(strip $1),$(strip $2),$(strip $3),$(strip $4),$(strip $5),$(strip $6),$(strip $7),$(strip $8),$(strip $9),$(strip $(10)),$(strip $(11)),$(strip $(12)),$(strip $(13)),$(strip $(14)),$(strip $(15)),$(strip $(16)),$(strip $(17)),$(strip $(18)),$(strip $(19)),$(strip $(20)),$(strip $(21)))

#
# Utilities for property list parsing.  Users should call one of
# find-values, find-value, or get-value (please see below).
#

#
# $(call tokenize-proplist,<property list>)
#
# Returns a tokenized property list by making sure every '=' ends up
# in a separate word.
#
tokenize-proplist = $(strip \
  $(subst =,$(space)=$(space),$1) \
)

#
# $(call at-prop-key,<token>*)
#
# Checks if its argument starts with a property key, returning it
# if so, and nothing otherwise.  The corresponding values, if any,
# start after the key and the following ':' token.
#
at-prop-key = $(strip \
  $(if $(filter =,$(word 2,$1)), \
    $(filter-out =,$(word 1,$1)) \
  ) \
)

#
# $(call at-prop-value,<token>*)
#
# Checks if its argument starts with a property value, returning it
# if so, and nothing otherwise.
#
at-prop-value = $(strip \
  $(if $(call at-prop-key,$1), \
  , \
    $(filter-out =,$(word 1,$1)) \
  ) \
)

#
# $(call list-prop-values,<token>*)
#
# Returns any property values at the head of the token sequence.
#
list-prop-values = $(strip \
  $(if $(call at-prop-value,$1), \
    $(call at-prop-value,$1) \
    $(call list-prop-values,$(wordlist 2,$(words $1),$1)) \
  ) \
)

#
# $(call skip-prop-values,<token>*)
#
# Returns the remaining tokens after skipping the property values
# at the head of the token sequence.
#
skip-prop-values = $(strip \
  $(if $(call at-prop-value,$1), \
    $(call skip-prop-values,$(wordlist 2,$(words $1),$1)) \
  , \
    $1 \
  ) \
)

#
# $(call find-values-impl,<key>,<token>*,<recognized key>*)
#
# Implements find-values, taking a tokenized property list.
#
find-values-impl = $(strip \
  $(if $(word 1,$2), \
    $(if $(call at-prop-key,$2), \
      $(if $(filter-out $3,$(call at-prop-key,$2)), \
        $(error unrecognized property key '$(call at-prop-key,$2)') \
      ) \
      $(if $(filter $1,$(call at-prop-key,$2)), \
        $(call list-prop-values,$(wordlist 3,$(words $2),$2)) \
      ) \
      $(call find-values-impl,$1, \
        $(call skip-prop-values,$(wordlist 3,$(words $2),$2)),$3) \
    , \
      $(if $(call at-prop-value,$2), \
        $(error property value '$(call at-prop-value,$2)' \
          without preceeding key) \
      ) \
      $(call find-values-impl,$1,$(wordlist 2,$(words $2),$2),$3) \
    ) \
  ) \
)

#
# $(call reject-multiple-prop-values,<key>,<value>*)
#
reject-multiple-prop-values = $(strip \
  $(if $(word 2,$2), \
    $(error multiple property values for key '$1') \
  ) \
  $(word 1,$2) \
)

#
# $(call require-prop-value,<key>,<value>*)
#
require-prop-value = $(strip \
  $(if $(word 1,$2), \
    $(word 1,$2)  \
  , \
    $(error no property value for key '$1') \
  ) \
)
  
#
# $(call to-boolean-value,<key>,<value>?,<default>?)
#
to-boolean-value = $(strip \
  $(if $(filter yes,$2), \
    yes \
  , $(if $(filter no,$2), \
      \
    , \
      $(if $(strip $2), \
        $(error value for property '$1' must be 'yes' or 'no') \
      , \
        $(filter yes,$3) \
      ) \
      \
    ) \
  ) \
)
        
#
# User entry points for parsing property lists: use one of
# find-values, find-value, find-boolean-value, get-value or
# get-boolean-value.
#

#
# $(call find-values,<key>,<property list>,<recognized-key>*)
#
# Returns the property values, if any, for <key>.  Each property key
# in the list must be one of the recognized keys.
#
find-values = $(strip \
  $(call find-values-impl,$1,$(call tokenize-proplist,$2),$3) \
)

#
# $(call find-value,<key>,<property list>,<recognized-key>*)
#
# Returns at most one property value for <key>.  Each property key
# in the list must be one of the recognized keys.
#
find-value = $(strip \
  $(call reject-multiple-prop-values,$1,$(call find-values,$1,$2,$3)) \
)

#
# $(call find-boolean-value,<key>,<property list>,<recognized-key>*,<default>?)
#
# If a value for <key> is found, then 'yes' is returned if its value
# its specified as 'yes', and nothing is returned if its value is
# specified as 'no'.  Other values are treated as errors.
# If no value for <key> is found, then yes is returned if <default> is
# specified as 'yes', and nothing is returned otherwise.
# Each property key in the list must be one of the recognized keys.
#
find-boolean-value = $(strip \
  $(call to-boolean-value,$1,$(call find-value,$1,$2,$3),$4) \
)

#
# $(call get-value,<key>,<property list>,<recognized-key>*)
#
# Returns exactly one property value for <key>.  Each property key
# in the list must be one of the recognized keys.
#
get-value = $(strip \
  $(call require-prop-value,$1,$(call find-value,$1,$2,$3)) \
)

#
# $(call get-boolean-value,<key>,<property list>,<recognized-key>*)
#
# Returns either 'yes' if the value for <key> is specified as 'yes',
# or nothing if the value for <key> is specified as 'no'.
# Each property key in the list must be one of the recognized keys.
#
get-boolean-value = $(strip \
  $(call to-boolean-value,$1,$(call get-value,$1,$2,$3),) \
)

#
# $(call reverse,<word>*)
#
reverse = $(strip \
  $(if $(firstword $1), \
    $(call reverse,$(wordlist 2,$(words $1),$1)) \
    $(firstword $1) \
  ) \
)

#
# $(call set-add,<word>*,<new word>*)
#
# Adds each <new word> to the set of <word>s, returning the new set.
#
set-add = $(strip \
  $(if $(firstword $2), \
    $(call set-add, \
      $1 $(filter-out $1,$(firstword $2)), \
      $(wordlist 2,$(words $2),$2) \
    ) \
  , \
    $1 \
  ) \
)

#
# $(call dedup,<word>*)
#
# Removes duplicates from the list of each <word>, returning the new list.
#
dedup = $(call set-add,,$1)

#
# $(call expand,<text>)
#
expand = $(if $(expand-info),$(info $1))$(eval $1)

#
# Some character classification sets.  Note that $(puncts) is
# deliberately limited to avoid syntactic complications.
#
lowers := a b c d e f g h i j k l m n o p q r s t u v w x y z
uppers := A B C D E D G H I J K L M N O P Q R S T U V W X Y Z
alphas := $(lowers) $(uppers)
digits := 0 1 2 3 4 5 6 7 8 9
alnums := $(alphas) $(digits)
puncts := ! " & ' * + - . : ; < = > ? @ [ ] ^ _ ` { | } ~ 

#
# $(call split-word-impl,<word>,<char>*)
#
split-word-impl = $(if $(firstword $2), \
  $(subst $(firstword $2),$(firstword $2) , \
    $(call split-word-impl,$1,$(wordlist 2,$(words $2),$2)) \
  ) \
, \
  $1 \
)

#
# $(call split-word,<word>)
#
# Returns a list of space-separated 'character' tokens from the
# characters in <word>.
#
# Please note that characters not in $(split-word-charset) are *not*
# separated from their successors.
#
split-word-charset := $(alnums) $(puncts)
split-word = $(strip $(call split-word-impl,$1,$(split-word-charset)))
    
#
# $(call checked-package-name-impl,<package name>,<char>*)
#
checked-package-name-impl = $(strip \
  $(if $(filter-out $(lowers) $(digits),$(firstword $2)), \
    $(error $(strip \
      package name '$1' must start with a lower case letter or digit \
    )) \
  ) \
  $(if $(filter 0 1,$(words $2)), \
    $(error $(strip \
      package name '$1' must have at least two characters \
    )) \
  ) \
  $(if $(filter-out $(lowers) $(digits) -,$(wordlist 2,$(words $2),$2)), \
    $(error $(strip \
      package name '$1' may only contain lower case letters, \
      digits, and '-' \
    )) \
  ) \
  $1 \
)

#
# $(call checked-package-name,<name>)
#
checked-package-name = $(strip \
  $(if $(filter-out 1,$(words $1)), \
    $(error package name '$1' must have exactly one word) \
  ) \
  $(call checked-package-name-impl,$(strip $1), \
    $(call split-word,$(strip $1))) \
)

#
# $(call checked-package-version-or-revision,<keyword>,<value>?)
#
checked-package-version-or-revision = $(strip \
  $(if $(firstword $2), \
    $(if $(filter-out 1,$(words $2)), \
      $(error $1 ('$2') must not contain whitespace) \
    ) \
    $(if $(filter-out $(alnums) + . ~,$(call split-word,$2)), \
      $(error $1 ('$2') may only contain alphanumerics, '+', '.', and '~') \
    ) \
    $2 \
  ) \
)
    
#
# $(call notdir-basename-impl,<output>,<input>)
#
notdir-basename-impl = $(strip \
  $(if $(strip $1), \
    $1 \
  , \
    $(error no basename in '$2') \
  ) \
)

#
# $(call notdir-basename,<path>*)
#
notdir-basename = $(strip \
  $(foreach p,$1, \
    $(call notdir-basename-impl,$(basename $(notdir $p)),$p) \
  ) \
)

#
# $(call check-duplicate-basenames,<path>*,<prev basename>*)
#
check-duplicate-basenames = $(strip \
  $(if $(firstword $1), \
    $(if $(filter \
      $(call notdir-basename,$(firstword $1)), \
      $2), \
      $(error duplicate basename in '$(firstword $1)') \
    , \
      $(firstword $1) \
      $(call check-duplicate-basenames, \
        $(wordlist 2,$(words $1),$1), \
        $2 \
        $(call notdir-basename,$(firstword $1)) \
      ) \
    ) \
  ) \
)

#
# $(call read-link,<path>)
#
read-link = $(if $(windows),,$(shell readlink "$(call to-shell,$1)"))

#
# $(call checked-python-sysconfig-var,<name>,<result>)
#
checked-python-sysconfig-var = $(strip \
  $(if $(or $(filter-out 1,$(words $2)),$(filter None,$2)), \
    $(error failed to determine python sysconfig variable '$1') \
  ) \
  $2 \
)
    
#
# $(call python-sysconfig-var,<name>)
#
python-sysconfig-var = $(call checked-python-sysconfig-var,$1,$(shell "$(call to-shell,$(usp-system-python))" -c "import sysconfig; print(sysconfig.get_config_var('$1'))"))

#
# $(call python-extension-filename,<extension name>)
#
python-extension-filename = $1$(call python-sysconfig-var,EXT_SUFFIX)

# 
# $(call checked-read-single-word-file,<filename>,<contents>)
#
checked-read-single-word-file = $(strip \
  $(if $(filter-out 1,$(words $2)), \
    $(error '$1' must contain a single word after stripping comments) \
  ) \
  $(firstword $2) \
)

#
# $(call read-single-word-file,<filename>)
# 
# Reads a single-word file; comments are stripped
#
read-single-word-file = $(call checked-read-single-word-file,$1,$(shell "$(call to-shell,$(usp-sed))" -e 's/#.*//' "$(call to-shell,$1)"))