#
# "THE BEER-WARE LICENSE" (Revision CS-42):
#
# This file was written by the CodeShop developers.  As long as you
# retain this notice you can do whatever you want with it.
# If we meet some day, and you think this file is worth it, you can
# buy us a beer in return.  Even if you do that, this file still
# comes WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#

#
# $(call check-project-prereqs,<project>,<depending project>*)
#
check-project-prereqs = $(strip \
  $(foreach pre,$($1.prereqs), \
    $(if $(filter-out $(all-projects),$(pre)), \
      $(error project '$1': prereq project '$(pre)' not found) \
    ) \
    $(if $(filter $2 $1,$(pre)), \
      $(error $(strip \
        project prereq cycle in project chain \
        $(foreach prj,$2 $1,'$(prj)' ->') '$(pre)' \
      )) \
    ) \
    $(call check-project-prereqs,$(pre),$2 $1) \
  ) \
)

#
# $(call check-package-prereqs,<package>,<depending package>*)
#
check-package-prereqs = $(strip \
  $(foreach pre,$($1.package-prereqs), \
    $(if $(filter-out $(all-packages),$(pre)), \
      $(error package '$1': prereq package '$(pre)' not found) \
    ) \
    $(if $(filter $2 $1,$(pre)), \
      $(error $(strip \
        package prereq cycle in package chain \
        $(foreach pkg,$2 $1,'$(pkg)' ->') '$(pre)' \
      )) \
    ) \
    $(call check-package-prereqs,$(pre),$2 $1) \
  ) \
)

#
# $(call check-packaged-projects,<package>)
#
check-packaged-projects = $(strip \
  $(foreach prj,$($1.package-projects), \
    \
    $(call REM,check project name) \
    $(if $(filter-out $(all-projects),$(prj)), \
      $(error package '$1': project '$(prj)' not found) \
    ) \
    \
    $(call REM,check project is distributable) \
    $(if $($(prj).distributable), \
      $(call REM,ok) \
    , \
      $(error package '$1': project '$(prj)' is not distributable) \
    ) \
    \
    $(call REM,prevent project in multiple packages) \
    $(filter-out %,$(call find-package,$(prj))) \
    \
    $(call REM,check prereq packages required by project) \
    $(foreach pre,$($(prj).prereqs), \
      $(if $(filter-out $1 $($1.package-prereqs),$(call find-package,$(pre))), \
        $(error $(strip \
          package '$1': missing prereq package '$(call find-package,$(pre))' \
          required by prereq project '$(pre)' of project '$(prj)' \
        )) \
      ) \
    ) \
  ) \
)

#
# $(call native-packager-settings,<package>,<flavor>)
#
native-packager-settings = $(strip \
  $(build-settings) \
  package=$($1.package-$2-name) \
  pkg-version="$(pkg-version)" \
  pkg-revision="$(pkg-revision)" \
  pkgs-dir="$(if $(strip $(pkgs-dir)),$(call to-shell,$(call non-relative-path,$(pkgs-dir))))" \
  license="$($1.package-license)" \
  prereq-packages="$(foreach p,$($1.package-prereqs),$($p.package-$2-name))" \
  artifacts-dir="$(call to-shell,$(artifacts-dir)/$1)" \
  packaging-work-dir="$(call to-shell,$(packaging-work-dir)/$2)" \
  conf-files="$(foreach f,$($1.package-conf-files),$(call to-shell,$(call non-relative-path,$f)))" \
  doc-files="$(foreach f,$($1.package-doc-files),$(call to-shell,$(call non-relative-path,$f)))" \
  openrc-files="$(foreach f,$($1.package-openrc-files),$(call to-shell,$(call non-relative-path,$f)))" \
  service-files="$(foreach f,$($1.package-service-files),$(call to-shell,$(call non-relative-path,$f)))" \
  apache-conf-files="$(foreach f,$($1.package-apache-conf-files),$(call to-shell,$(call non-relative-path,$f)))" \
  apache-load-files="$(foreach f,$($1.package-apache-load-files),$(call to-shell,$(call non-relative-path,$f)))" \
)

#
# $(call artifact-targets,<package>)
#
define artifact-targets =
#
# Distributable artifact targets for package $1
#
$(artifacts-dir)/$1: | $(artifacts-dir)
	$(usp-mkdir-p) "$$(call to-shell,$$@)"

$(foreach prj,$($1.package-projects),$(prj).project-artifacts: | $(artifacts-dir)/$1$(newline))

.PHONY: $1.artifacts
$1.artifacts: $(strip $(foreach pkg,$($1.package-prereqs),$(pkg).artifacts) $(foreach prj,$($1.package-projects),$(prj).project-artifacts))

.PHONY: $1.deb-package
$1.deb-package: $(strip $(foreach pkg,$($1.package-prereqs),$(pkg).deb-package) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/DebPackage.mak $(call native-packager-settings,$1,deb) deb-package

.PHONY: $1.rpm-package
$1.rpm-package: $(strip $(foreach pkg,$($1.package-prereqs),$(pkg).rpm-package) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/RpmPackage.mak $(call native-packager-settings,$1,rpm) rpm-package

.PHONY: $1.apk-package
$1.apk-package: $(strip $(foreach pkg,$($1.package-prereqs),$(pkg).apk-package) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/ApkPackage.mak $(call native-packager-settings,$1,apk) apk-package

.PHONY: $1.zip-file
$1.zip-file: $(strip $(foreach pkg,$($1.package-prereqs),$(pkg).zip-file) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/ZipFile.mak $(call native-packager-settings,$1,zip) zip-file

.PHONY: $1.clean-artifacts
$1.clean-artifacts:
	$(usp-rm-rf) "$$(call to-shell,$(artifacts-dir)/$1)"

endef

#
# Check the project and package DAGs
#
$(foreach prj,$(all-projects),$(call check-project-prereqs,$(prj)))
$(foreach pkg,$(all-packages),$(call check-package-prereqs,$(pkg)))

#
# Check if the package and project DAGs match
#
$(foreach pkg,$(all-packages),$(call check-packaged-projects,$(pkg)))

#
# Define artifact targets for all packages
#
$(strip \
  $(foreach pkg,$(all-packages), \
    $(call expand,$(call artifact-targets,$(pkg))) \
  ) \
)

.PHONY: all.artifacts
all.artifacts: $(foreach pkg,$(all-packages),$(pkg).artifacts) 

.PHONY: all.deb-package
all.deb-package: $(foreach pkg,$(all-packages),$(pkg).deb-package) 

.PHONY: all.rpm-package
all.rpm-package: $(foreach pkg,$(all-packages),$(pkg).rpm-package) 

.PHONY: all.apk-package
all.apk-package: $(foreach pkg,$(all-packages),$(pkg).apk-package) 

.PHONY: all.zip-file
all.zip-file: $(foreach pkg,$(all-packages),$(pkg).zip-file) 

.PHONY: all.clean-artifacts
all.clean-artifacts:
	$(foreach f,$(wildcard $(artifacts-dir)/*),$(usp-rm-rf) "$(call to-shell,$f)"$(newline))

PHONY: clean
clean:
	$(usp-rm-rf) "$(call to-shell,$(build-dir))"
