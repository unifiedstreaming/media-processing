#
# Copyright (C) 2022-2025 CodeShop B.V.
#
# This file is part of the usp-builder project.
#
# The usp-builder project is free software: you can redistribute it
# and/or modify it under the terms of version 2 of the GNU General
# Public License as published by the Free Software Foundation.
#
# The usp-builder project is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See version
# 2 of the GNU General Public License for more details.
#
# You should have received a copy of version 2 of the GNU General
# Public License along with the usp-builder project.  If not, see
# <http://www.gnu.org/licenses/>.
#

#
# $(call check-project-prereqs,<project>,<depending project>*)
#
check-project-prereqs = $(strip \
  $(foreach pre,$($1.prereqs), \
    $(if $(filter-out $(all-projects),$(pre)), \
      $(error project '$1': prereq project '$(pre)' not found or not enabled) \
    ) \
    $(if $(filter $2 $1,$(pre)), \
      $(error $(strip \
        project prereq cycle in project chain \
        $(foreach prj,$2 $1,'$(prj)' ->') '$(pre)' \
      )) \
    ) \
    $(call check-project-prereqs,$(pre),$2 $1) \
  ) \
)

#
# $(call check-staged-libs,<project>)
#
check-staged-libs = $(strip \
  $(foreach lib,$($1.staged-libs), \
    $(foreach other-prj,$(filter-out $1,$(all-projects)), \
      $(if $(filter $(lib),$($(other-prj).staged-libs)), \
        $(error $(strip \
          project '$(other-prj)': library '$(lib)' is also staged \
          by project '$1' \
        )) \
      ) \
    ) \
  ) \
)

#
# $(call check-package-prereqs,<package>,<depending package>*)
#
check-package-prereqs = $(strip \
  $(foreach pre,$($1.package-prereqs), \
    $(if $(filter-out $(all-packages),$(pre)), \
      $(error package '$1': prereq package '$(pre)' not found or not enabled) \
    ) \
    $(if $(filter $2 $1,$(pre)), \
      $(error $(strip \
        package prereq cycle in package chain \
        $(foreach pkg,$2 $1,'$(pkg)' ->') '$(pre)' \
      )) \
    ) \
    $(call check-package-prereqs,$(pre),$2 $1) \
  ) \
)

#
# $(call pkg-provides-pkg,<providing package>*,<searched package>)
#
pkg-provides-pkg = $(strip \
  $(if $(strip $1), \
    $(if $(filter $2,$1), \
      yes \
    , \
      $(call pkg-provides-pkg,$(foreach pre,$1,$($(pre).package-prereqs)),$2) \
    ) \
  ) \
)

#
# $(call check-packaged-project-prereq-impl,<package>,<project>,<prereq project>,<prereq-package>?)
#
check-packaged-project-prereq-impl = $(strip \
  $(if $($3.distributable), \
    $(if $(strip $4), \
      $(if $(call pkg-provides-pkg,$1,$4), \
        $(call REM,ok) \
      , \
        $(error $(strip \
          package '$1': missing (direct or indirect) prereq package '$4' \
          required by prereq project '$3' of project '$2' \
        )) \
      ) \
    , \
      $(error $(strip \
        package '$1': no package found \
        for prereq project '$3' of project '$2' \
      )) \
    ) \
  ) \
)

#
# $(call check-packaged-project-prereq,<package>,<project>,<prereq project>)
#
check-packaged-project-prereq = $(strip \
  $(call check-packaged-project-prereq-impl,$1,$2,$3,$(call find-package,$3)) \
)

#
# $(call check-packaged-projects,<package>)
#
check-packaged-projects = $(strip \
  $(foreach prj,$($1.package-projects), \
    \
    $(call REM,check project name) \
    $(if $(filter-out $(all-projects),$(prj)), \
      $(error package '$1': project '$(prj)' not found or not enabled) \
    ) \
    \
    $(call REM,check project is distributable) \
    $(if $($(prj).distributable), \
      $(call REM,ok) \
    , \
      $(error package '$1': project '$(prj)' is not distributable) \
    ) \
    \
    $(call REM,prevent project in multiple packages) \
    $(filter-out %,$(call find-package,$(prj))) \
    \
    $(call REM,check prereq packages required by project) \
    $(foreach pre,$($(prj).prereqs), \
      $(call check-packaged-project-prereq,$1,$(prj),$(pre)) \
    ) \
  ) \
)

#
# $(call get-package-map,<flavor>)
#
get-package-map = $(strip \
  $(if $(filter zip,$1), \
    $(zip-file.map) \
  , \
    $($1-package.map) \
  ) \
)

#
# $(call mapped-package-names,<package name>*,<flavor>)
#
mapped-package-names = $(strip \
  $(sort $(call replace-items,$1,$(call get-package-map,$2))) \
)
  
#
# $(call native-packager-settings,<package>,<flavor>,<prereq package>*)
#
native-packager-settings = $(strip \
  $(build-settings) \
  package=$($1.package-$2-name) \
  pkgs-dir="$(if $(strip $(pkgs-dir)),$(call to-shell,$(call non-relative-path,$(pkgs-dir))))" \
  license="$($1.package-license)" \
  prereq-packages="$(foreach p,$3,$($p.package-$2-name))" \
  artifacts-dir="$(call to-shell,$(artifacts-dir)/$1)" \
  packaging-work-dir="$(call to-shell,$(packaging-work-dir)/$2)" \
  conf-files="$(foreach f,$($1.package-conf-files),$(call to-shell,$(call non-relative-path,$f)))" \
  doc-files="$(foreach f,$($1.package-doc-files),$(call to-shell,$(call non-relative-path,$f)))" \
  openrc-files="$(foreach f,$($1.package-openrc-files),$(call to-shell,$(call non-relative-path,$f)))" \
  service-files="$(foreach f,$($1.package-service-files),$(call to-shell,$(call non-relative-path,$f)))" \
  apache-conf-files="$(foreach f,$($1.package-apache-conf-files),$(call to-shell,$(call non-relative-path,$f)))" \
  apache-load-files="$(foreach f,$($1.package-apache-load-files),$(call to-shell,$(call non-relative-path,$f)))" \
  $($1.package-$2-name).package-version="$($1.package-version)" \
  $($1.package-$2-name).package-revision="$($1.package-revision)" \
  $(foreach p,$3,$($p.package-$2-name).package-version="$($p.package-version)" $($p.package-$2-name).package-revision="$($p.package-revision)") \
  add-debug-package=$(if $($1.package-add-debug-package),yes,no) \
  extra-prereq-system-packages="$(call mapped-package-names,$($1.package-extra-prereq-system-packages),$2)" \
  require-user="$($1.package-require-user)" \
  require-group="$($1.package-require-group)" \
)

#
# $(call artifact-targets,<package>,<prereq package>*)
#
define artifact-targets =
#
# Distributable artifact targets for package $1
#
.PHONY: $(artifacts-dir)/$1
$(artifacts-dir)/$1: | $(artifacts-dir)
	$(usp-rm-dir) "$$(call to-shell,$$@)"
	$(usp-mkdir-p) "$$(call to-shell,$$@)"

$(foreach prj,$($1.package-projects),$(prj).project-artifacts): $(artifacts-dir)/$1

.PHONY: $1.artifacts
$1.artifacts: $(strip $(foreach pkg,$2,$(pkg).artifacts) $(foreach prj,$($1.package-projects),$(prj).project-artifacts))

.PHONY: $1.deb-package
$1.deb-package: $(strip $(foreach pkg,$2,$(pkg).deb-package) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/DebPackage.mak $(call native-packager-settings,$1,deb,$2) deb-package

.PHONY: $1.rpm-package
$1.rpm-package: $(strip $(foreach pkg,$2,$(pkg).rpm-package) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/RpmPackage.mak $(call native-packager-settings,$1,rpm,$2) rpm-package

.PHONY: $1.apk-package
$1.apk-package: $(strip $(foreach pkg,$2,$(pkg).apk-package) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/ApkPackage.mak $(call native-packager-settings,$1,apk,$2) apk-package

.PHONY: $1.zip-file
$1.zip-file: $(strip $(foreach pkg,$2,$(pkg).zip-file) $1.artifacts)
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/ZipFile.mak $(call native-packager-settings,$1,zip,$2) zip-file

.PHONY: $1.clean-artifacts
$1.clean-artifacts:
	$(usp-rm-dir) "$$(call to-shell,$(artifacts-dir)/$1)"

endef

#
# Check the project and package DAGs
#
$(foreach prj,$(all-projects),$(call check-project-prereqs,$(prj)))
$(foreach prj,$(all-projects),$(call check-staged-libs,$(prj)))
$(foreach pkg,$(all-packages),$(call check-package-prereqs,$(pkg)))

#
# Check if the package and project DAGs match
#
$(foreach pkg,$(all-packages),$(call check-packaged-projects,$(pkg)))

#
# Set packager-specific package names
#
$(foreach pkg,$(all-packages),$(call expand,$(pkg).package-apk-name := $(call replace-items,$(pkg),$(apk-package.map))))

$(foreach pkg,$(all-packages),$(call expand,$(pkg).package-deb-name := $(call replace-items,$(pkg),$(deb-package.map))))

$(foreach pkg,$(all-packages),$(call expand,$(pkg).package-rpm-name := $(call replace-items,$(pkg),$(rpm-package.map))))

$(foreach pkg,$(all-packages),$(call expand,$(pkg).package-zip-name := $(call replace-items,$(pkg),$(zip-file.map))))

#
# Check for duplicate packager-specific package names
#
all-apk-packages :=
$(foreach pkg,$(all-packages),$(eval all-apk-packages := $(call add-package,$(all-apk-packages),$($(pkg).package-apk-name))))

all-deb-packages :=
$(foreach pkg,$(all-packages),$(eval all-deb-packages := $(call add-package,$(all-deb-packages),$($(pkg).package-deb-name))))

all-rpm-packages :=
$(foreach pkg,$(all-packages),$(eval all-rpm-packages := $(call add-package,$(all-rpm-packages),$($(pkg).package-rpm-name))))

all-zip-files :=
$(foreach pkg,$(all-packages),$(eval all-zip-files := $(call add-package,$(all-zip-files),$($(pkg).package-zip-name))))

#
# $(call deep-package-prereqs,<direct-prereq>*,<resolved-prereq>*)
#
deep-package-prereqs = $(strip \
  $(if $(firstword $1), \
    $(call REM, more to resolve) \
    $(if $(filter $(firstword $1),$2), \
      $(call REM, first already resolved so just resolve rest) \
      $(call deep-package-prereqs,$(wordlist 2,$(words $1),$1),$2) \
    , \
      $(call REM, resolve first then resolve rest) \
      $(call deep-package-prereqs,$(wordlist 2,$(words $1),$1), \
        $(call deep-package-prereqs,$($(firstword $1).package-prereqs),$2) \
          $(firstword $1)) \
    ) \
  , \
    $(call REM, all resolved) \
    $2 \
  ) \
)

#
# $(call recursive-package-prereqs,<package>)
#
recursive-package-prereqs = $(strip \
  $(call deep-package-prereqs,$($1.package-prereqs)) \
)

#
# Define artifact targets for all packages
#
$(foreach p,$(all-packages),$(call expand,$(call artifact-targets,$p,$(call recursive-package-prereqs,$p))))

.PHONY: all.deploy
all.deploy: $(foreach prj,$(all-projects),$(prj).deploy)

.PHONY: all.artifacts
all.artifacts: $(foreach pkg,$(all-packages),$(pkg).artifacts) 

.PHONY: all.deb-package
all.deb-package: $(foreach pkg,$(all-packages),$(pkg).deb-package) 

.PHONY: all.rpm-package
all.rpm-package: $(foreach pkg,$(all-packages),$(pkg).rpm-package) 

.PHONY: all.apk-package
all.apk-package: $(foreach pkg,$(all-packages),$(pkg).apk-package) 

.PHONY: all.zip-file
all.zip-file: $(foreach pkg,$(all-packages),$(pkg).zip-file) 

.PHONY: all.clean-artifacts
all.clean-artifacts:
	$(foreach f,$(wildcard $(artifacts-dir)/*),$(usp-rm-dir) "$(call to-shell,$f)"$(newline))

PHONY: clean
clean:
	$(usp-rm-dir) "$(call to-shell,$(build-dir))"
