#
# Copyright (C) 2022-2023 CodeShop B.V.
#
# This file is part of the usp-builder project.
#
# The usp-builder project is free software: you can redistribute it
# and/or modify it under the terms of version 2 of the GNU General
# Public License as published by the Free Software Foundation.
#
# The usp-builder project is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See version
# 2 of the GNU General Public License for more details.
#
# You should have received a copy of version 2 of the GNU General
# Public License along with the usp-builder project.  If not, see
# <http://www.gnu.org/licenses/>.
#

include usp-builder/USPCommon.mki

#
# Recursive Make Considered Harmful: prevent concurrent captains on
# the ship (bjam and/or GNUmake) each assuming they're the only
# process generating build artifacts in (potentially) shared locations
# such as the bjam build directory (over which we have no control),
# the staging directory or make deploy's $(dest-dir).
#
# Please note that sub-makes will still run parallel jobs if -j<X> is
# passed to this Makefile, and that bjam uses parallel builds by
# default.
#
.NOTPARALLEL:

#
# Determine the build directory
#
override build-dir := $(abspath $(if $(build-dir),$(call to-make,$(build-dir)),usp-build))

#
# Determine the bjam-specific build directory
#
bjam-build-dir := $(build-dir)/bjam

#
# Determine the (build setting-specific) directory for generated artifacts 
#
build-mode-dir := $(build-dir)/other/$(subst $(space),/,$(subst =,-,$(build-settings)))

#
# Determine the (build setting-specific) staging directory
#
stage-dir := $(build-mode-dir)/stage

#
# Determine the (build setting-specific) unit test output directory
#
unit-test-out-dir := $(build-mode-dir)/unit-test-out

#
# Determine the (build setting-specific) directory for distributable
# artifacts (one subdir per package)
#
artifacts-dir := $(build-mode-dir)/artifacts

#
# Determine the working directory for packaging (.deb, .rpm. etc)
#
packaging-work-dir := $(build-mode-dir)/packaging

#
# Generating a skeleton build directory
#

skeleton-build-dirs := \
  $(build-dir) \
  $(bjam-build-dir) \
  $(build-mode-dir) \
  $(artifacts-dir) \
  $(packaging-work-dir) \
  $(stage-dir) \
  $(stage-dir)/bin \
  $(stage-dir)/include \
  $(stage-dir)/lib \
  $(stage-dir)/lib/jamfiles \
  $(stage-dir)/timestamps \
  $(unit-test-out-dir)
  
.PHONY: build-dir-skeleton
build-dir-skeleton: $(stage-dir)/lib/jamfiles/Jamroot | $(skeleton-build-dirs)

$(bjam-build-dir): | $(build-dir)
$(build-mode-dir): | $(build-dir)
$(artifacts-dir): | $(build-mode-dir)
$(packaging-work-dir): | $(build-mode-dir)
$(stage-dir): | $(build-mode-dir)
$(stage-dir)/bin: | $(stage-dir)
$(stage-dir)/include: | $(stage-dir)
$(stage-dir)/lib: | $(stage-dir)
$(stage-dir)/lib/jamfiles: | $(stage-dir)/lib
$(stage-dir)/timestamps: | $(stage-dir)
$(unit-test-out-dir): | $(build-mode-dir)

$(skeleton-build-dirs):
	$(usp-mkdir-p) "$(call to-shell,$@)"

define staged-jamroot-content :=
project staged-jamfiles ;

endef

$(stage-dir)/lib/jamfiles/Jamroot: | $(stage-dir)/lib/jamfiles
	$(file >$@,$(staged-jamroot-content))
	@echo updated $@

#
# Windows: unit tests must find DLLs in $(stage-dir)/bin
#
PATH := $(if $(windows),$(stage-dir)/bin:)$(PATH)
export PATH

#
# $(call project-work-dir,<project>)
# Returns the (build setting-specific) working directory for <project>
#
project-work-dir = $(build-mode-dir)/work/$1

#
# $(call recursive-prereqs,<project name>)
#
recursive-prereqs-impl = $(foreach prereq,$($1.prereqs), \
  $(prereq) $(call recursive-prereqs-impl,$(prereq)) \
)
recursive-prereqs = $(call keep-last-instance,$(call recursive-prereqs-impl,$1))

#
# $(call required-versions,<project name>)
#
required-versions = $(strip \
  $(foreach proj,$1 $(call recursive-prereqs,$1), \
    $(if $($(proj).version),$(proj).version=$($(proj).version)) \
  ) \
)

#
# $(call add-project,<project list>,<project name>)
#
# Returns a new project list.
#
add-project = $(strip \
  $(if $(filter $2,$1),$(error duplicate project name '$2')) \
  $1 $2 \
)

#
# $(call add-package,<package list>,<package name>)
#
# Returns a new package list.
#
add-package = $(strip \
  $(if $(filter $2,$1),$(error duplicate package name '$2')) \
  $1 $2 \
)

#
# $(call find-all-packages,<project>)
#
find-all-packages = $(strip \
  $(foreach pkg,$(all-packages), \
    $(if $(filter $1,$($(pkg).package-projects)), \
      $(pkg) \
    ) \
  ) \
)

#
# $(call find-package-impl,<project>,<package>*)
#
find-package-impl = $(strip \
  $(if $(filter 0,$(words $2)), \
    $(call REM,found no package) \
  , \
    $(if $(filter 1,$(words $2)), \
      $(call REM,found single package) \
      $(firstword $2) \
    , \
      $(error $(strip \
        multiple packages found for project '$1': \
        $(foreach pkg,$2,'$(pkg)') \
      )) \
    ) \
  ) \
)

#
# $(call find-package,<project>)
#
find-package = $(strip \
  $(if $($1.distributable), \
    $(call find-package-impl,$1,$(call find-all-packages,$1)) \
  ) \
)

#
# $(call project-artifacts-dir-impl,<project>,<package>?)
#
project-artifacts-dir-impl = $(strip \
  $(if $(strip $2), \
    $(artifacts-dir)/$(strip $2) \
  , \
    $(error project '$1' is not included in any package) \
  ) \
)
    
#
# $(call project-artifacts-dir,<project>)
# (to be evaluated very lazily, as part of a recipe)
#
project-artifacts-dir = $(strip \
  $(call project-artifacts-dir-impl,$1,$(call find-package,$1)) \
)
      
#
# $(call is-enabled,<property list>,<recognized-key>*)
#
is-enabled = $(call find-boolean-value,enabled,$1,$2,yes)

#
# $(call gmake-options,<project name>)
# (to be evaluated very lazily, as part of a recipe)
#
gmake-options = $(strip \
  work-dir="$(call project-work-dir,$1)" \
  stage-dir="$(stage-dir)" \
  $(call required-versions,$1) \
)
  
#
# $(call gmake-deploy-options,<project name>)
# (to be evaluated very lazily, as part of a recipe)
#
gmake-deploy-options = $(strip \
  $(call gmake-options,$1) \
  dest-dir="$(call to-shell,$(call required-value,dest-dir))" \
)

#
# $(call gmake-package-options,<project name>)
# (to be evaluated very lazily, as part of a recipe)
#
gmake-package-options = $(strip \
  $(call gmake-options,$1) \
  dest-dir="$(call to-shell,$(call project-artifacts-dir,$1))" \
)

#
# $(call gmake-project-impl,<name>,<version>?,<makefile>,<prereq name>*,<distributable>?)
#
define gmake-project-impl =
#
# $1 (gmake project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version := $2
$1.prereqs := $4
$1.distributable := $5

.PHONY: $1
$1: $1.all

.PHONY: $1.all
$1.all: build-dir-skeleton $(addsuffix .stage,$4)
	$$(MAKE) -I $(usp-builder-include-dir) -C $(dir $3) -f $(notdir $3) $$(call gmake-options,$1) $(build-settings) all

.PHONY: $1.stage
$1.stage: $1.all
	$$(MAKE) -I $(usp-builder-include-dir) -C $(dir $3) -f $(notdir $3) $$(call gmake-options,$1) $(build-settings) stage

.PHONY: $1.deploy
$1.deploy: $1.all $(addsuffix .deploy,$4)
$(if $5,$(tab)$$(MAKE) -I $(usp-builder-include-dir) -C $(dir $3) -f $(notdir $3) $$(call gmake-deploy-options,$1) $(build-settings) deploy)

$(if $5,PHONY: $1.project-artifacts)
$(if $5,$1.project-artifacts: $1.all)
$(if $5,$(tab)$$(MAKE) -I $(usp-builder-include-dir) -C $(dir $3) -f $(notdir $3) $$(call gmake-package-options,$1) $(build-settings) deploy)

.PHONY: $1.clean
$1.clean:
	$(usp-rm-rf) "$(call to-shell,$(call project-work-dir,$1))"
	$(usp-rm-rf) "$(call to-shell,$(stage-dir)/timestamps/$1)"

endef

#
# $(call gmake-project,<properties>)
#
# properties are:
# name          project name
# version?      version number
# makefile      path to makefile
# prereqs*      prerequisite projects
# distributable either 'yes' or 'no' 
# enabled?      either 'yes' or 'no', defaults to yes
#
gmake-keys := name version makefile prereqs distributable enabled
gmake-project = $(if $(call is-enabled,$1,$(gmake-keys)),$(call expand,$(call call-stripped, \
  gmake-project-impl, \
  $(call get-value,name,$1,$(gmake-keys)), \
  $(call find-value,version,$1,$(gmake-keys)), \
  $(call get-value,makefile,$1,$(gmake-keys)), \
  $(call find-values,prereqs,$1,$(gmake-keys)), \
  $(call get-boolean-value,distributable,$1,$(gmake-keys)) \
)))

#
# $(call bjam-options,<project name>)
# (to be evaluated very lazily, as part of a recipe)
#
bjam-options = $(strip \
 $(if $(verbose),-d+2) \
 --build-dir="$(call to-native,$(bjam-build-dir))" \
 -sstage-dir="$(call to-native,$(stage-dir))" \
 -sunit-test-out-dir="$(call to-native,$(unit-test-out-dir))" \
 $(addprefix -s,$(call required-versions,$1)) \
)

#
# $(call bjam-deploy-options,<project name>)
# (to be evaluated very lazily, as part of a recipe)
#
bjam-deploy-options = $(strip \
  $(call bjam-options,$1) \
  -sdest-dir="$(call to-native,$(call required-value,dest-dir))" \
)

#
# $(call bjam-package-options,<project name>)
# (to be evaluated very lazily, as part of a recipe)
#
bjam-package-options = $(strip \
  $(call bjam-options,$1) \
  -sdest-dir="$(call to-native,$(call project-artifacts-dir,$1))" \
)

#
# $(call update-staged-jamfile-args,<jamfile>,<libname>,<libfile>,<incdir>,<prereq-lib>*)
#
update-staged-jamfile-args = $(strip \
  jamfile=$1 \
  libname=$2 \
  libfile=$3 \
  incdir=$4 \
  prereq-libs="$5" \
)

#
# $(call bjam-legacy-project-impl,<name>,<version>?,<source dir>,<prereq name>*,<distributable>?)
#
define bjam-legacy-project-impl =
#
# $1 (bjam legacy project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version := $2
$1.prereqs := $4
$1.distributable := $5

.PHONY: $1
$1: $1.all

.PHONY: $1.all
$1.all: build-dir-skeleton $(addsuffix .stage,$4)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $3//uspb-all

# Legacy bjam project: no staging; consumers can only be other
# jamfiles referring to this project's jamfile
.PHONY: $1.stage
$1.stage: $1.all

.PHONY: $1.deploy
$1.deploy: $1.all $(addsuffix .deploy,$4)
$(if $5,$(tab)$(usp-bjam) $$(call bjam-deploy-options,$1) $(build-settings) $3//uspb-deploy)

$(if $5,.PHONY: $1.project-artifacts)
$(if $5,$1.project-artifacts: $1.all)
$(if $5,$(tab)$(usp-bjam) $$(call bjam-package-options,$1) $(build-settings) $3//uspb-deploy)

.PHONY: $1.clean
$1.clean:
	$(usp-bjam) --clean $$(call bjam-options,$1) $(build-settings) $3

# Pattern rule for running a specific bjam target (unit test)
.PHONY: $1.%
$1.%: build-dir-skeleton $(addsuffix .stage,$4)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $3//$$*

endef

#
# $(call bjam-legacy-project,<properties>)
#
# properties are:
# name          project name
# version?      version number
# source-dir    source directory
# prereqs*      prerequisite projects
# distributable either 'yes' or 'no' 
# enabled?      either 'yes' or 'no', defaults to yes
#
bjam-legacy-keys := name version source-dir prereqs distributable enabled
bjam-legacy-project = $(if $(call is-enabled,$1,$(bjam-legacy-keys)),$(call expand,$(call call-stripped, \
  bjam-legacy-project-impl, \
  $(call get-value,name,$1,$(bjam-legacy-keys)), \
  $(call find-value,version,$1,$(bjam-legacy-keys)), \
  $(call get-value,source-dir,$1,$(bjam-legacy-keys)), \
  $(call find-values,prereqs,$1,$(bjam-legacy-keys)), \
  $(call get-boolean-value,distributable,$1,$(bjam-legacy-keys)) \
)))

#
# $(call bjam-dll-project-impl,<name>,<version>,<source dir>,<include dir>,<prereq name>*)
#
define bjam-dll-project-impl =
#
# $1 (bjam dll project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version := $2
$1.prereqs := $5
$1.distributable := yes

.PHONY: $1
$1: $1.all

.PHONY: $1.all
$1.all: build-dir-skeleton $(addsuffix .stage,$5)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $3//uspb-all

# We deliberately abuse recursive make here to avoid touching the
# jamfile in the stage dir when bjam-stage did nothing.  (The .deploy
# targets depend on the .stage targets of their prerequisites, and
# .deploy may be run as root).
.PHONY: $1.stage
$1.stage: $1.bjam-stage
	$(if $(windows),,$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/UpdateLibLink.mak stage-dir=$(stage-dir) work-dir=$(call project-work-dir,$1) target-name=$(call bjam-dll-filename,$1,$2) link-name=$(call bjam-implib-filename,$1))
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/UpdateStagedJamfile.mak $(call update-staged-jamfile-args,$(stage-dir)/lib/jamfiles/$1/jamfile,$1,$(stage-dir)/lib/$(call bjam-implib-filename,$1),$(abspath $4),$5)

.PHONY: $1.deploy
$1.deploy: $1.all $(addsuffix .deploy,$5)
	$(usp-bjam) $$(call bjam-deploy-options,$1) $(build-settings) $3//uspb-deploy

PHONY: $1.project-artifacts
$1.project-artifacts: $1.all
	$(usp-bjam) $$(call bjam-package-options,$1) $(build-settings) $3//uspb-deploy

.PHONY: $1.clean
$1.clean:
	$(usp-bjam) --clean $$(call bjam-options,$1) $(build-settings) $3

.PHONY: $1.bjam-stage
$1.bjam-stage: $1.all
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $3//uspb-stage

endef

#
# $(call bjam-dll-project,<properties>)
#
# properties are:
# name        project name
# version     version number
# source-dir  source directory
# include-dir include directory
# prereqs*    prerequisite projects
# enabled?    either 'yes' or 'no', defaults to yes
#
bjam-dll-keys := name version source-dir include-dir prereqs enabled
bjam-dll-project = $(if $(call is-enabled,$1,$(bjam-dll-keys)),$(call expand,$(call call-stripped, \
  bjam-dll-project-impl, \
  $(call get-value,name,$1,$(bjam-dll-keys)), \
  $(call get-value,version,$1,$(bjam-dll-keys)), \
  $(call get-value,source-dir,$1,$(bjam-dll-keys)), \
  $(call get-value,include-dir,$1,$(bjam-dll-keys)), \
  $(call find-values,prereqs,$1,$(bjam-dll-keys)) \
)))

#
# $(call bjam-plugin-project-impl,<name>,<version>,<source dir>,<prereq name>*)
#
define bjam-plugin-project-impl =
#
# $1 (bjam plugin project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version := $2
$1.prereqs := $4
$1.distributable := yes

.PHONY: $1
$1: $1.all

.PHONY: $1.all
$1.all: build-dir-skeleton $(addsuffix .stage,$4)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $3//uspb-all

.PHONY: $1.stage
$1.stage: $1.all
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $3//uspb-stage

.PHONY: $1.deploy
$1.deploy: $1.all $(addsuffix .deploy,$5)
	$(usp-bjam) $$(call bjam-deploy-options,$1) $(build-settings) $3//uspb-deploy

PHONY: $1.project-artifacts
$1.project-artifacts: $1.all
	$(usp-bjam) $$(call bjam-package-options,$1) $(build-settings) $3//uspb-deploy

.PHONY: $1.clean
$1.clean:
	$(usp-bjam) --clean $$(call bjam-options,$1) $(build-settings) $3

endef

#
# $(call bjam-plugin-project,<properties>)
#
# properties are:
# name        project name
# version     version number
# source-dir  source directory
# prereqs*    prerequisite projects
# enabled?    either 'yes' or 'no', defaults to yes
#
bjam-plugin-keys := name version source-dir prereqs enabled
bjam-plugin-project = $(if $(call is-enabled,$1,$(bjam-plugin-keys)),$(call expand,$(call call-stripped, \
  bjam-plugin-project-impl, \
  $(call get-value,name,$1,$(bjam-plugin-keys)), \
  $(call get-value,version,$1,$(bjam-plugin-keys)), \
  $(call get-value,source-dir,$1,$(bjam-plugin-keys)), \
  $(call find-values,prereqs,$1,$(bjam-plugin-keys)) \
)))

#
# $(call bjam-statlib-project-impl,<name>,<source dir>,<include dir>,<prereq name>*)
#
define bjam-statlib-project-impl =
#
# $1 (bjam static library project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version :=
$1.prereqs := $4
$1.distributable :=

.PHONY: $1
$1: $1.all

.PHONY: $1.all
$1.all: build-dir-skeleton $(addsuffix .stage,$4)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $2//uspb-all

# We deliberately abuse recursive make here to avoid touching the
# jamfile in the stage dir when bjam-stage did nothing.  (The .deploy
# targets depend on the .stage targets of their prerequisites, and
# .deploy may be run as root).
.PHONY: $1.stage
$1.stage: $1.bjam-stage
	$$(MAKE) -I $(usp-builder-include-dir) -f $(usp-builder-lib-dir)/UpdateStagedJamfile.mak $(call update-staged-jamfile-args,$(stage-dir)/lib/jamfiles/$1/jamfile,$1,$(stage-dir)/lib/$(call bjam-statlib-filename,$1),$(abspath $3),$4)

# Static library: nothing to do for deploying
.PHONY: $1.deploy
$1.deploy: $1.all $(addsuffix .deploy,$4)

.PHONY: $1.clean
$1.clean:
	$(usp-bjam) --clean $$(call bjam-options,$1) $(build-settings) $2

.PHONY: $1.bjam-stage
$1.bjam-stage: $1.all
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $2//uspb-stage

endef

#
# $(call bjam-statlib-project,<properties>)
#
# properties are:
# name        project name
# source-dir  source directory
# include-dir include directory
# prereqs*    prerequisite projects
# enabled?    either 'yes' or 'no', defaults to yes
#
bjam-statlib-keys := name source-dir include-dir prereqs enabled
bjam-statlib-project = $(if $(call is-enabled,$1,$(bjam-statlib-keys)),$(call expand,$(call call-stripped, \
  bjam-statlib-project-impl, \
  $(call get-value,name,$1,$(bjam-statlib-keys)), \
  $(call get-value,source-dir,$1,$(bjam-statlib-keys)), \
  $(call get-value,include-dir,$1,$(bjam-statlib-keys)), \
  $(call find-values,prereqs,$1,$(bjam-statlib-keys)) \
)))

#
# $(call bjam-exe-project-impl,<name>,<source dir>,<prereq name>*)
#
define bjam-exe-project-impl =
#
# $1 (bjam exe project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version := 
$1.prereqs := $3
$1.distributable := yes

.PHONY: $1
$1: $1.all

.PHONY: $1.all
$1.all: build-dir-skeleton $(addsuffix .stage,$3)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $2//uspb-all

.PHONY: $1.deploy
$1.deploy: $1.all $(addsuffix .deploy,$3)
	$(usp-bjam) $$(call bjam-deploy-options,$1) $(build-settings) $2//uspb-deploy

PHONY: $1.project-artifacts
$1.project-artifacts: $1.all
	$(usp-bjam) $$(call bjam-package-options,$1) $(build-settings) $2//uspb-deploy

.PHONY: $1.clean
$1.clean:
	$(usp-bjam) --clean $$(call bjam-options,$1) $(build-settings) $2

endef

#
# $(call bjam-exe-project,<properties>)
#
# properties are:
# name        project name
# source-dir  source directory
# prereqs*    prerequisite projects
# enabled?    either 'yes' or 'no', defaults to yes
#
bjam-exe-keys := name source-dir prereqs enabled
bjam-exe-project = $(if $(call is-enabled,$1,$(bjam-exe-keys)),$(call expand,$(call call-stripped, \
  bjam-exe-project-impl, \
  $(call get-value,name,$1,$(bjam-exe-keys)), \
  $(call get-value,source-dir,$1,$(bjam-exe-keys)), \
  $(call find-values,prereqs,$1,$(bjam-exe-keys)) \
)))

#
# $(call bjam-test-project-impl,<name>,<source dir>,<prereq name>*)
#
define bjam-test-project-impl =
#
# $1 (bjam test project)
#
all-projects := $$(call add-project,$$(all-projects),$1)

$1.version :=
$1.prereqs := $3
$1.distributable :=

.PHONY: $1
$1: $1.all

$1.all: build-dir-skeleton $(addsuffix .stage,$3)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $2//uspb-all

.PHONY: $1.clean
$1.clean:
	$(usp-bjam) --clean $$(call bjam-options,$1) $(build-settings) $2

# Pattern rule for running a specific test
.PHONY: $1.%
$1.%: build-dir-skeleton $(addsuffix .stage,$3)
	$(usp-bjam) $$(call bjam-options,$1) $(build-settings) $2//$$*

endef

#
# $(call bjam-test-project,<properties>)
#
# properties are:
# name        project name
# source-dir  source directory
# prereqs*    prerequisite projects
# enabled?    either 'yes' or 'no', defaults to yes
#
bjam-test-keys := name source-dir prereqs enabled
bjam-test-project = $(if $(call is-enabled,$1,$(bjam-test-keys)),$(call expand,$(call call-stripped, \
  bjam-test-project-impl, \
  $(call get-value,name,$1,$(bjam-test-keys)), \
  $(call get-value,source-dir,$1,$(bjam-test-keys)), \
  $(call find-values,prereqs,$1,$(bjam-test-keys)) \
)))

#
# $(call package-impl,<package name>,<apk-name>?,<deb-name>?,<rpm-name>?,<zip-name>?,<project>*,<prereq-package>*,<license>,<doc file>*,<conf file>*,<service file>*,<openrc file>*,<apache conf-file>*,<apache-load-file>*)
#
define package-impl =
#
# Attributes for package '$1'
#
all-packages := $$(call add-package,$$(all-packages),$(call checked-package-name,$1))

$1.package-apk-name := $(if $2,$2,$1)
all-apk-packages := $$(call add-package,$$(all-apk-packages),$$($1.package-apk-name))

$1.package-deb-name := $(if $3,$3,$1)
all-deb-packages := $$(call add-package,$$(all-deb-packages),$$($1.package-deb-name))

$1.package-rpm-name := $(if $4,$4,$1)
all-rpm-packages := $$(call add-package,$$(all-rpm-packages),$$($1.package-rpm-name))

$1.package-zip-name := $(if $5,$5,$1)
all-zip-packages := $$(call add-package,$$(all-zip-packages),$$($1.package-zip-name))

$1.package-projects := $6
$1.package-prereqs := $7
$1.package-license := $8
$1.package-doc-files := $9
$1.package-conf-files := $(10)
$1.package-service-files := $(11)
$1.package-openrc-files := $(12)
$1.package-apache-conf-files := $(13)
$1.package-apache-load-files := $(14)

endef

#
# $(call package,<properties>)
#
# properties are:
# name                package name
# projects*           packaged projects
# prereq-packages*    prerequisite packages
# apk-name?           apk-specific package name override
# deb-name?           deb-specific package name override
# rpm-name?           rpm-specific package name override
# zip-name?           zip-specific package name override
# license             package license
# doc-files*          package-specific documentation files
# conf-files*         package-specific config files
# service-files*      package-specific systemd service files
# openrc-files*       package-specific openrc init files
# apache-conf-files*  package-specific apache .conf file templates
# apache-load-files*  package-specific apache .load file templates
package-keys := \
  name \
  projects \
  prereq-packages \
  apk-name \
  deb-name \
  rpm-name \
  zip-name \
  license \
  doc-files \
  conf-files \
  service-files \
  openrc-files \
  apache-conf-files \
  apache-load-files \
  enabled
  
package = $(if $(call is-enabled,$1,$(package-keys)),$(call expand,$(call call-stripped, \
  package-impl, \
  $(call get-value,name,$1,$(package-keys)), \
  $(call find-value,apk-name,$1,$(package-keys)), \
  $(call find-value,deb-name,$1,$(package-keys)), \
  $(call find-value,rpm-name,$1,$(package-keys)), \
  $(call find-value,zip-name,$1,$(package-keys)), \
  $(call find-values,projects,$1,$(package-keys)), \
  $(call find-values,prereq-packages,$1,$(package-keys)), \
  $(call get-value,license,$1,$(package-keys)), \
  $(call check-duplicate-basenames,$(call find-values,doc-files,$1,$(package-keys))), \
  $(call check-duplicate-basenames,$(call find-values,conf-files,$1,$(package-keys))), \
  $(call check-duplicate-basenames,$(call find-values,service-files,$1,$(package-keys))), \
  $(call check-duplicate-basenames,$(call find-values,openrc-files,$1,$(package-keys))), \
  $(call check-duplicate-basenames,$(call find-values,apache-conf-files,$1,$(package-keys))), \
  $(call check-duplicate-basenames,$(call find-values,apache-load-files,$1,$(package-keys))) \
)))

#
# Clear the lists of projects and packages just before reading the
# project definition file
#
all-projects :=

all-packages :=

all-apk-packages :=
all-deb-packages :=
all-rpm-packages :=
all-zip-packages :=
